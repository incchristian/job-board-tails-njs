
C:\Projects\job-board-tails-njs>if exist src\app\api\messages\route.ts (echo ===== src\app\api\messages\route.ts =====   & type src\app\api\messages\route.ts   & echo.)  else (echo ===== src\app\api\messages\route.ts =====   & echo File not found   & echo.) 
===== src\app\api\messages\route.ts ===== 
import { NextResponse } from "next/server";
import sqlite3 from "sqlite3";
import { open } from "sqlite";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/app/api/auth/[...nextauth]/route"; // Adjust path to your auth config

export async function GET(request: Request) {
  const session = await getServerSession(authOptions);
  if (!session || !session.user?.id) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const db = await open({
    filename: "C:/Projects/job-board-tails-njs/database.sqlite",
    driver: sqlite3.Database,
  });

  // Fetch messages where the user is the recipient
  const messages = await db.all(
    `SELECT m.id, m.content, m.timestamp, u.name AS senderName, u.profilePicture AS senderPic
     FROM messages m
     JOIN users u ON m.senderId = u.id
     WHERE m.recipientId = ?
     ORDER BY m.timestamp DESC
     LIMIT 5`,
    [session.user.id]
  );

  await db.close();

  return NextResponse.json({ messages });
}

C:\Projects\job-board-tails-njs>if exist src\app\api\messages\send\route.ts (echo ===== src\app\api\messages\send\route.ts =====   & type src\app\api\messages\send\route.ts   & echo.)  else (echo ===== src\app\api\messages\send\route.ts =====   & echo File not found   & echo.) 
===== src\app\api\messages\send\route.ts ===== 
import { NextResponse } from "next/server";
import sqlite3 from "sqlite3";
import { open } from "sqlite";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";

export async function POST(request: Request) {
  const session = await getServerSession(authOptions);
  if (!session || !session.user?.id) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { recipientId, content } = await request.json();
  if (!recipientId || !content) {
    return NextResponse.json({ error: "Missing recipientId or content" }, { status: 400 });
  }

  const db = await open({
    filename: "C:/Projects/job-board-tails-njs/database.sqlite",
    driver: sqlite3.Database,
  });

  const result = await db.run(
    "INSERT INTO messages (senderId, recipientId, content, timestamp) VALUES (?, ?, ?, ?)",
    [session.user.id, recipientId, content, new Date().toISOString()]
  );

  await db.close();

  return NextResponse.json({ id: result.lastID });
}

C:\Projects\job-board-tails-njs>if exist src\app\api\user\update\route.ts (echo ===== src\app\api\user\update\route.ts =====   & type src\app\api\user\update\route.ts   & echo.)  else (echo ===== src\app\api\user\update\route.ts =====   & echo File not found   & echo.) 
===== src\app\api\user\update\route.ts ===== 
import { NextRequest, NextResponse } from "next/server";
import sqlite3 from "sqlite3";
import { open } from "sqlite";
import { getServerSession } from "next-auth/next";
import { authOptions } from "../../auth/[...nextauth]/route";
import { getToken } from "next-auth/jwt";

export async function GET(req: NextRequest) {
  console.log("GET /api/user/update - Headers:", Object.fromEntries(req.headers));
  let session = await getServerSession(authOptions);
  console.log("GET /api/user/update - Session from getServerSession:", session);

  if (!session || !session.user?.id) {
    const token = await getToken({ 
      req, 
      secret: process.env.NEXTAUTH_SECRET,
      cookieName: "next-auth.session-token"
    });
    console.log("GET /api/user/update - Token from getToken:", token);

    if (token && token.sub) {
      session = { user: { id: token.sub, name: token.name, email: token.email } };
      console.log("GET /api/user/update - Session set from token:", session);
    } else {
      return NextResponse.json({ 
        error: "Unauthorized - No valid session or token", 
        session, 
        token, 
        cookies: req.cookies.get("next-auth.session-token") 
      }, { status: 401 });
    }
  }

  if (!session || !session.user?.id) {
    return NextResponse.json({ 
      error: "Unauthorized - Final check failed", 
      session 
    }, { status: 401 });
  }

  try {
    const db = await open({
      filename: "./database.sqlite",
      driver: sqlite3.Database,
    });

    const user = await db.get(
      "SELECT name, email, phoneNumber, username, bio, profilePicture FROM users WHERE id = ?",
      [session.user.id]
    );
    await db.close();

    if (!user) {
      return NextResponse.json({ error: "User not found" }, { status: 404 });
    }

    return NextResponse.json(user, { status: 200 });
  } catch (error) {
    console.error("GET /api/user/update - Error:", error);
    return NextResponse.json({ error: "Server error" }, { status: 500 });
  }
}

// POST handler unchanged
export async function POST(req: NextRequest) {
  console.log("POST /api/user/update - Headers:", Object.fromEntries(req.headers));
  let session = await getServerSession(authOptions);
  console.log("POST /api/user/update - Session from getServerSession:", session);

  if (!session || !session.user?.id) {
    const token = await getToken({ 
      req, 
      secret: process.env.NEXTAUTH_SECRET,
      cookieName: "next-auth.session-token" 
    });
    console.log("POST /api/user/update - Token from getToken:", token);

    if (token && token.sub) {
      session = { user: { id: token.sub, name: token.name, email: token.email } };
      console.log("POST /api/user/update - Session set from token:", session);
    } else {
      return NextResponse.json({ 
        error: "Unauthorized - No valid session or token", 
        session, 
        token, 
        cookies: req.cookies.get("next-auth.session-token") 
      }, { status: 401 });
    }
  }

  if (!session || !session.user?.id) {
    return NextResponse.json({ 
      error: "Unauthorized - Final check failed", 
      session 
    }, { status: 401 });
  }

  let body;
  try {
    body = await req.json();
    console.log("POST /api/user/update - Request body:", body);
  } catch (error) {
    console.error("POST /api/user/update - Invalid body:", error);
    return NextResponse.json({ error: "Invalid request body" }, { status: 400 });
  }

  const { name, email, phoneNumber, username, bio } = body;
  if (!name || !email) {
    return NextResponse.json({ error: "Name and email are required" }, { status: 400 });
  }

  try {
    const db = await open({
      filename: "./database.sqlite",
      driver: sqlite3.Database,
    });

    await db.run(
      "UPDATE users SET name = ?, email = ?, phoneNumber = ?, username = ?, bio = ? WHERE id = ?",
      [name, email, phoneNumber || null, username || null, bio || null, session.user.id]
    );
    console.log("POST /api/user/update - User updated, ID:", session.user.id);

    await db.close();
    return NextResponse.json({ message: "Profile updated" }, { status: 200 });
  } catch (error) {
    console.error("POST /api/user/update - Error:", error);
    return NextResponse.json({ error: "Server error" }, { status: 500 });
  }
}

C:\Projects\job-board-tails-njs>if exist src\app\jobs\edit\[jobId]\page.tsx (echo ===== src\app\jobs\edit\[jobId]\page.tsx =====   & type src\app\jobs\edit\[jobId]\page.tsx   & echo.)  else (echo ===== src\app\jobs\edit\[jobId]\page.tsx =====   & echo File not found   & echo.) 
===== src\app\jobs\edit\[jobId]\page.tsx ===== 
import sqlite3 from "sqlite3";
import { open } from "sqlite";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import EditJobClient from "./EditJobClient";

async function fetchJob(jobId) {
  const db = await open({
    filename: "./database.sqlite",
    driver: sqlite3.Database,
  });
  const job = await db.get(
    `SELECT id, title, description, location, employerId, logoPath, 
            lat, lng, country, state, street, city, postalCode 
     FROM jobs WHERE id = ?`,
    [jobId]
  );
  await db.close();
  return job;
}

export default async function EditJobPage({ params }) {
  const { jobId } = params; // Matches [jobId] folder
  const session = await getServerSession(authOptions);
  const job = await fetchJob(jobId);

  return <EditJobClient initialJob={job} session={session} />;
}

C:\Projects\job-board-tails-njs>if exist src\app\my-jobs\page.tsx (echo ===== src\app\my-jobs\page.tsx =====   & type src\app\my-jobs\page.tsx   & echo.)  else (echo ===== src\app\my-jobs\page.tsx =====   & echo File not found   & echo.) 
===== src\app\my-jobs\page.tsx ===== 
import sqlite3 from "sqlite3";
import { open } from "sqlite";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import DefaultLayout from "@/components/Layouts/DefaultLayout";
import Link from "next/link";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";
import JobDropdown from "./JobDropdown";

async function fetchMyJobs(userId) {
  const db = await open({
    filename: "./database.sqlite",
    driver: sqlite3.Database,
  });
  const jobs = await db.all(
    "SELECT id, title, description, location, employerId FROM jobs WHERE employerId = ?",
    [userId]
  );
  await db.close();
  return jobs;
}

async function deleteJob(jobId) {
  const db = await open({
    filename: "./database.sqlite",
    driver: sqlite3.Database,
  });
  await db.run("DELETE FROM jobs WHERE id = ?", [jobId]);
  await db.close();
}

export default async function MyJobsPage({ searchParams }) {
  const session = await getServerSession(authOptions);
  const userId = session?.user?.id;
  const userClass = session?.user?.userClass || "Candidate";

  if (!session) {
    return (
      <DefaultLayout>
        <div className="container mx-auto p-6">
          <h1 className="text-3xl font-bold mb-6">My Job Listings</h1>
          <p className="text-gray-600">Please log in to view your jobs.</p>
        </div>
      </DefaultLayout>
    );
  }

  if (userClass === "Candidate") {
    return (
      <DefaultLayout>
        <div className="container mx-auto p-6">
          <h1 className="text-3xl font-bold mb-6">My Job Listings</h1>
          <p className="text-gray-600">This page is only for employers.</p>
        </div>
      </DefaultLayout>
    );
  }

  // Handle delete action
  if (searchParams?.delete) {
    await deleteJob(searchParams.delete);
    revalidatePath("/my-jobs");
    redirect("/my-jobs");
  }

  const jobs = await fetchMyJobs(userId);

  return (
    <DefaultLayout>
      <div className="container mx-auto p-6">
        <h1 className="text-3xl font-bold mb-6">My Job Listings</h1>
        <p className="text-gray-500 mb-4">Your User ID: {userId}</p> {/* Debug */}
        {jobs.length === 0 ? (
          <p className="text-gray-600">
            You haven’t posted any jobs yet.{" "}
            <Link href="/jobs/post" className="text-primary hover:underline">
              Post a job now
            </Link>
          </p>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {jobs.map((job) => (
              <div
                key={job.id}
                className="bg-white p-4 rounded-lg shadow-md flex flex-col h-64 w-full relative"
              >
                <h2 className="text-xl font-semibold mb-2 truncate">{job.title}</h2>
                <p className="text-gray-600 mb-2 flex-grow overflow-hidden">
                  {job.description}
                </p>
                <p className="text-gray-500 text-sm">📍 {job.location}</p>
                <p className="text-gray-400 text-xs">Job ID: {job.id}, Employer ID: {job.employerId}</p> {/* Debug */}
                <div className="mt-2">
                  <Link
                    href={`/jobs/edit/${job.id}`}
                    className="text-primary hover:underline text-sm"
                  >
                    Edit
                  </Link>
                </div>
                <JobDropdown jobId={job.id} />
              </div>
            ))}
          </div>
        )}
      </div>
    </DefaultLayout>
  );
}
